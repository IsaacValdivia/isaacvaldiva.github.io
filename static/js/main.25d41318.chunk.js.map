{"version":3,"sources":["res/headshot.jpg","components/Node/index.js","components/Node/Node.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","size","buttonStyle","disabled","Button","className","title","icon","METAL_ICON","ORCHESTRA_ICON","ELECTRONIC_ICON","CHAMBER_ICON","JAZZ_ICON","PERFORMANCE_ICON","TOP_LEFT","TOP_CENTER","TOP_RIGHT","MID_RIGHT","MID_LEFT","BOT_LEFT","BOT_CENTER","BOT_RIGHT","lang","LanguagePicker","useState","dropdownOpen","setOpen","setLanguage","_lang","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","right","DropdownItem","onClick","divider","App","class","ButtonGroup","useMediaQuery","query","outline","Container","fluid","Row","Col","xs","Card","CardImg","top","src","Headshot","alt","CardImgOverlay","vertical","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25d41318.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.2d0fca85.jpg\";","import Node from \"./Node\";\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = props => {\r\n  let buttonStyle = \"btn-ripple rounded-circle \";\r\n  let size;\r\n  if (props.disabled) {\r\n    buttonStyle += \"disabledButton\";\r\n    size = \"sm\";\r\n  } else {\r\n    buttonStyle += \"roundButton\";\r\n    size = \"md\";\r\n  }\r\n  return (\r\n    <Button className={buttonStyle} disabled={props.disabled} size={size}>\r\n      <div className=\"d-flex flex-column justify-content-center align-items-center responsiveContent\">\r\n        {props.disabled ? \"\" : props.title}\r\n        <span className=\"responsiveIcon\">{props.disabled ? \"\" : props.icon}</span>\r\n      </div>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default Node;","import React, { useState } from \"react\";\nimport { ButtonGroup, Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { Card, CardImg, CardImgOverlay } from \"reactstrap\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport { GiOcarina, GiProcessor, GiMinerals, GiViolin, GiSoundWaves, GiSaxophone, GiQuillInk, GiPianoKeys } from \"react-icons/gi\";\nimport { useMediaQuery } from \"react-responsive\";\nimport Node from \"./components/Node\";\nimport './App.css';\nimport Headshot from \"./res/headshot.jpg\"\nimport './constants/Constants';\nimport { mediaBreakpoint } from \"./constants/Constants\";\n\n\n\nconst METAL_ICON = <GiMinerals />;\nconst ORCHESTRA_ICON = <GiViolin />;\nconst ORCHESTRA_CALM_ICON = <GiOcarina />;\nconst ORCHESTRA_INTENSE_ICON = <GiOcarina />;\nconst ELECTRONIC_ICON = <GiSoundWaves />;\nconst ELECTRONIC_CALM = <GiOcarina />;\nconst ELECTRONIC_INTENSE = <GiOcarina />;\nconst CHAMBER_ICON = <GiQuillInk />;\nconst JAZZ_ICON = <GiSaxophone />;\nconst PERFORMANCE_ICON = <GiPianoKeys />;\n\nconst TOP_LEFT = <Node title=\"Metal&Rock\" icon={METAL_ICON} />;\nconst TOP_CENTER = <Node title=\"Orchestral\" icon={ORCHESTRA_ICON} />;\nconst TOP_RIGHT = <Node title=\"Electronic\" icon={ELECTRONIC_ICON} />;\nconst MID_RIGHT = <Node title=\"Chamber\" icon={CHAMBER_ICON} />;\nconst MID_LEFT = <Node title=\"Jazz\" icon={JAZZ_ICON} />;\nconst BOT_LEFT = <Node title=\"Metal\" icon={METAL_ICON} disabled/>;\nconst BOT_CENTER = <Node title=\"Performance\" icon={PERFORMANCE_ICON} />;\nconst BOT_RIGHT = <Node title=\"Metal\" icon={METAL_ICON} disabled/>;\n\nlet lang = \"EN\";\n\nconst LanguagePicker = (props) => {\n  const [dropdownOpen, setOpen] = useState(false);\n\n  const toggle = () => {\n    setOpen(!dropdownOpen);\n  }\n\n  const setLanguage = (_lang) => {\n    lang = _lang;\n  }\n\n   return (\n     <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\n       <DropdownToggle caret>{lang}</DropdownToggle>\n       <DropdownMenu right>\n         <DropdownItem onClick={() => setLanguage(\"EN\")}>EN</DropdownItem>\n         <DropdownItem divider />\n         <DropdownItem onClick={() => setLanguage(\"ES\")}>ES</DropdownItem>\n       </DropdownMenu>\n     </ButtonDropdown>\n   );\n};\n\nconst App = () => {\n\n    return (\n      <div>\n        <div class=\"lines\">\n          <div class=\"line\"></div>\n          <div class=\"line\"></div>\n          <div class=\"line\"></div>\n        </div>\n        <div className=\" d-flex flex-column justify-content-start mainView\">\n          <div className=\"d-flex flex-row justify-content-between topBar\">\n            <ButtonGroup size={useMediaQuery({ query: \"(max-width: \" + mediaBreakpoint + \"px )\" }) ? \"sm\" : \"md\"}>\n              <Button>\n                <GiOcarina className=\"topBarIcon\" />\n                AUDIO\n              </Button>\n              <Button outline>\n                <GiProcessor className=\"topBarIcon pr-1\" />\n                PROGRAMMING\n              </Button>\n            </ButtonGroup>\n\n            <LanguagePicker />\n          </div>\n\n          <Container fluid className=\"mainCont h-100 d-flex flex-column justify-content-around\">\n            <Row className=\"\">\n              <Col className=\"d-flex flex-column justify-content-center align-items-center\">{TOP_LEFT}</Col>\n              <Col xs={5} className=\"d-flex flex-column justify-content-center align-items-center\">\n                {TOP_CENTER}\n              </Col>\n              <Col className=\"d-flex flex-column justify-content-center align-items-center\">{TOP_RIGHT}</Col>\n            </Row>\n            <Row className=\" d-flex flex-row align-items-center\">\n              <Col className=\"h-100 d-flex flex-column justify-content-center align-items-center\">{MID_LEFT}</Col>\n              <Col xs={5} className=\"w-100 h-100 d-flex flex-column justify-content-center align-items-center\">\n                <Card className=\"h-100 w-100 justify-content-center align-items-center text-center cardView\">\n                  <CardImg top className=\"roundHeadshot\" src={Headshot} alt=\"Card image cap\" />\n                  <CardImgOverlay className=\"d-flex flex-row justify-content-around\"></CardImgOverlay>\n                  <ButtonGroup\n                    vertical={useMediaQuery({ query: \"(max-width: 992px)\" })}\n                    className=\"w-100 pt-1 headshotButtons justify-content-center align-items-center\"\n                  >\n                    <Button outline className=\"w-100 h-100 text-white\">\n                      <span>About</span>\n                    </Button>\n                    <Button outline className=\"w-100 h-100 text-white\">\n                      <span>Competence</span>\n                    </Button>\n                  </ButtonGroup>\n                </Card>\n              </Col>\n              <Col className=\"h-100 d-flex flex-column justify-content-center align-items-center\">{MID_RIGHT}</Col>\n            </Row>\n            <Row className=\"\">\n              <Col className=\"d-flex flex-column justify-content-center align-items-center\">{BOT_LEFT}</Col>\n              <Col xs={5} className=\"d-flex flex-column justify-content-center align-items-center\">\n                {BOT_CENTER}\n              </Col>\n              <Col className=\"d-flex flex-column justify-content-center align-items-center\">{BOT_RIGHT}</Col>\n            </Row>\n          </Container>\n        </div>\n        <div className=\"lowerZone d-flex flex-row justify-content-between text-white\">\n          <span className=\"lowerText\">© 2020 Isaac Valdivia</span>\n          <span className=\"lowerText\">isaac.valdivia.audio@gmail.com</span>\n        </div>\n      </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}